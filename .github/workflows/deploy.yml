name: Build and Deploy to EKS

on:
  push:
    branches: [compose]
  pull_request:
    branches: [compose]

env:
  AWS_REGION: eu-west-1
  EKS_CLUSTER_NAME: shopping-list-test-cluster
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-backend:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save image tags
        run: |
          echo "BACKEND_IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-backend:${{ github.sha }}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-frontend:${{ github.sha }}" >> $GITHUB_ENV

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/compose'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Add Helm repositories
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
          helm repo update

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Terraform outputs
        run: |
          export LOAD_BALANCER_CONTROLLER_ROLE_ARN=$(jq -r .aws_load_balancer_controller_role_arn.value terraform/tf-outputs.json)
          export EBS_CSI_CONTROLLER_ROLE_ARN=$(jq -r .ebs_csi_controller_role_arn.value terraform/tf-outputs.json)
          echo "LOAD_BALANCER_CONTROLLER_ROLE_ARN=$LOAD_BALANCER_CONTROLLER_ROLE_ARN" >> $GITHUB_ENV
          echo "EBS_CSI_CONTROLLER_ROLE_ARN=$EBS_CSI_CONTROLLER_ROLE_ARN" >> $GITHUB_ENV

      - name: Setup service accounts and controllers
        run: |
          # Create service accounts with IAM role annotations
          kubectl create serviceaccount aws-load-balancer-controller -n kube-system --dry-run=client -o yaml | kubectl apply -f -
          kubectl annotate serviceaccount aws-load-balancer-controller -n kube-system eks.amazonaws.com/role-arn="$LOAD_BALANCER_CONTROLLER_ROLE_ARN" --overwrite

          kubectl create serviceaccount ebs-csi-controller-sa -n kube-system --dry-run=client -o yaml | kubectl apply -f -
          kubectl annotate serviceaccount ebs-csi-controller-sa -n kube-system eks.amazonaws.com/role-arn="$EBS_CSI_CONTROLLER_ROLE_ARN" --overwrite

          # Install AWS Load Balancer Controller
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --namespace kube-system \
            --set clusterName=${{ env.EKS_CLUSTER_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller

          # Install EBS CSI Driver (fixed for latest chart)
          helm upgrade --install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver \
            --namespace kube-system \
            --set controller.serviceAccount.create=false \
            --set controller.serviceAccount.name=ebs-csi-controller-sa

      - name: Deploy Backend
        run: |
          helm upgrade --install shopping-list-backend ./helm/backend \
            --namespace default \
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-backend \
            --set image.tag=${{ github.sha }}

      - name: Deploy Frontend
        run: |
          helm upgrade --install shopping-list-frontend ./helm/frontend \
            --namespace default \
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/shopping-list-frontend \
            --set image.tag=${{ github.sha }}

      - name: Wait for deployments
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=shopping-list-backend --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=shopping-list-frontend --timeout=300s

      - name: Get ALB URLs
        run: |
          echo "Waiting for ALB to be provisioned..."
          sleep 60

          FRONTEND_ALB=$(kubectl get ingress shopping-list-frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          BACKEND_ALB=$(kubectl get ingress shopping-list-backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          echo "Frontend URL: http://$FRONTEND_ALB" >> $GITHUB_STEP_SUMMARY
          echo "Backend API: http://$BACKEND_ALB" >> $GITHUB_STEP_SUMMARY

          echo "FRONTEND_URL=http://$FRONTEND_ALB" >> $GITHUB_ENV
          echo "BACKEND_URL=http://$BACKEND_ALB" >> $GITHUB_ENV

      - name: Test deployment
        run: |
          echo "Testing backend API..."
          curl -f http://$BACKEND_ALB/api/list || echo "Backend test failed"

          echo "Testing frontend..."
          curl -f http://$FRONTEND_ALB || echo "Frontend test failed"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Deployment completed successfully!

            ðŸ“± **Frontend URL**: ${{ env.FRONTEND_URL }}
            ðŸ”§ **Backend API**: ${{ env.BACKEND_URL }}

            The application has been deployed to the EKS cluster and is ready for testing.`
            })
